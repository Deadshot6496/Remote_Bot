using System.Diagnostics;
using System.IO.Ports;
using System.IO;
using System.Threading.Tasks;
using System.ComponentModel;

namespace Remote_Controller
{
    public partial class Form1 : Form
    {
        SerialPort myport = new SerialPort();
        char[] bufferTx = new char[10];
        string rxText = "",txText = "        ";
        public BackgroundWorker worker = new BackgroundWorker();

        string command = "";
        bool start_log = false, start_bot = false, fwd = false, rev = false,
            left = false, right = false, brake = false,  clear_log = false;
        int speed = 0;

        public Form1()
        {
            InitializeComponent();
            bufferTx[9] = '\n'; 
            connect_button.Click += Connect_button_Click;
            log_start_button.Click += Log_start_button_Click;
            clear_log_button.Click += Clear_log_button_Click;
            bot_start_button.Click += Bot_start_button_Click;
            controller_textbox.KeyDown += Controller_textbox_KeyDown;
            controller_textbox.KeyUp += Controller_textbox_KeyUp;
            speed_bar.ValueChanged += Speed_bar_ValueChanged;
            speed_bar.KeyDown += Speed_bar_KeyDown;
            speed_bar.KeyUp += Speed_bar_KeyUp;
            show_tx_button.Click += Show_tx_button_Click;

            try
            {
                listBox1.Items.Clear();
                foreach (string s in SerialPort.GetPortNames())
                {
                    listBox1.Items.Add(s);
                }

                Debug.WriteLine("ports grabbed");
            }
            catch (Exception x)
            {
                MessageBox.Show(x.Message);
            }


        }

        private void Show_tx_button_Click(object? sender, EventArgs e)
        {
            controller_textbox.Text = txText;
        }

        private void Speed_bar_ValueChanged(object? sender, EventArgs e)
        {
            speed = speed_bar.Value;
        }

        private void Controller_textbox_KeyUp(object? sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.W)
            {
                fwd = false;
            }
            else if (e.KeyCode == Keys.S)
            {
                rev = false;
            }
            if (e.KeyCode == Keys.A)
            {
                left = false;
            }
            else if (e.KeyCode == Keys.D)
            {
                right = false;
            }
            else if (e.KeyCode == Keys.Space)
            {
                brake = false;
            }
        }

        private void Controller_textbox_KeyDown(object? sender, KeyEventArgs e)
        {
            if(e.KeyCode == Keys.W)
            {
                fwd = true;
                //Debug.WriteLine(Keys.W);
            }
            else if (e.KeyCode == Keys.S)
            {
                rev = true;
                //Debug.WriteLine(Keys.S);
            }
            if (e.KeyCode == Keys.A)
            {
                left = true;
                //Debug.WriteLine(Keys.A);
            }
            else if (e.KeyCode == Keys.D)
            {
                right = true;
                //Debug.WriteLine(Keys.D);
            }
            else if(e.KeyCode == Keys.Space)
            {
                brake = true;
                //Debug.WriteLine(Keys.Space);
            }
            
        }

        private void Worker_DoWork(object sender, DoWorkEventArgs e)
        {
            BackgroundWorker worker_ = sender as BackgroundWorker;

            while (true)
            {
                if (worker.CancellationPending == true)
                {
                    e.Cancel = true;
                    break;
                }
                if (start_bot == true)
                {
                    if (myport.IsOpen == true)
                    {
                        txText = speed.ToString();
                        txText += ',';
                        if (left == true)
                        {
                            txText += '1';
                        }
                        else if (right == true)
                        {
                            txText += '2';
                        }
                        else
                        {
                            txText += ' ';  
                        }
                        txText += ',';
                        if(brake == true)
                        {
                            txText += '0';
                        }
                        else if (fwd == true)
                        {
                            txText += '1';
                        }
                        else if (rev == true)
                        {
                            txText += '2';
                        }
                        else
                        {
                            txText += ' ';
                        }
                        txText += '\n';
                        try
                        {
                            myport.Write(txText);
                        }
                        catch(Exception x)
                        {
                            Debug.WriteLine(x.Message+ "Write Error");
                        }
                        
                    }
                    System.Threading.Thread.Sleep(100);


                }

            }
        }

        private void Clear_log_button_Click(object? sender, EventArgs e)
        {
            textBox1.Text = "";
        }

        private void Log_start_button_Click(object? sender, EventArgs e)
        {
            if (start_log == false)
            {
                start_log = true;
            }
            else if (start_log == true)
            {
                start_log = false;
            }
        }
        private void Bot_start_button_Click(object? sender, EventArgs e)
        {
            if (start_bot == false)
            {
                try
                {
                    myport.PortName = "COM7";
                    if (listBox1.SelectedItems.Count > 0)
                    {
                        myport.PortName = listBox1.SelectedItems[0].ToString();
                    }
                    myport.BaudRate = 9600;
                    myport.Parity = Parity.None;
                    if (!myport.IsOpen)
                    {
                        myport.Open();
                        myport.DataReceived += Myport_DataReceived;
                    }
                    worker.DoWork += Worker_DoWork;
                    worker.WorkerReportsProgress = true;
                    worker.WorkerSupportsCancellation = true;
                    worker.RunWorkerAsync();
                    textBox1.Text = "Connected to " + listBox1.SelectedItems[0].ToString();
                }
                catch (Exception x)
                {
                    
                }
                start_bot = true;
                bot_start_button.Text = "Stop Com";
            }
            else if (start_bot == true)
            {
                bot_start_button.Text = "Start Com";
                start_bot = false;
                myport.Close();
            }

        }


        private void Connect_button_Click(object sender, EventArgs e)
        {
            try
            {
                myport.PortName = "COM7";
                if (listBox1.SelectedItems.Count > 0)
                {
                    myport.PortName = listBox1.SelectedItems[0].ToString();
                }
                myport.BaudRate = 9600;
                myport.Parity = Parity.None;
                if(!myport.IsOpen)
                {
                    myport.Open();
                    myport.DataReceived += Myport_DataReceived;
                }
                Debug.WriteLine(listBox1.SelectedItems[0].ToString());
            }
            catch(Exception x)
            {
                MessageBox.Show(x.Message + "Try selecting port");
            }
        }

        private void Myport_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            try
            {
                MethodInvoker methodInvoker = new MethodInvoker(delegate
                {
                    try
                    {
                        rxText = myport.ReadLine();
                        if(start_log == true)
                        {
                            textBox1.Text += rxText + Environment.NewLine;
                            textBox1.SelectionStart = textBox1.Text.Length;
                            textBox1.ScrollToCaret();
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("try connecting");
                    }
                });
                this.Invoke(methodInvoker);
            }
            catch (Exception x)
            {
                MessageBox.Show(x.Message + "Try selecting port");
            }
        }

        private void refresh_button_Click(object sender, EventArgs e)
        {
            try
            {
                listBox1.Items.Clear();
                foreach (string s in SerialPort.GetPortNames())
                {
                    listBox1.Items.Add(s);
                }

                Debug.WriteLine("ports grabbed");
            }
            catch (Exception x)
            {
                MessageBox.Show(x.Message);
            }
        }




        private void Speed_bar_KeyUp(object? sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.W)
            {
                fwd = false;
            }
            else if (e.KeyCode == Keys.S)
            {
                rev = false;
            }
            if (e.KeyCode == Keys.A)
            {
                left = false;
            }
            else if (e.KeyCode == Keys.D)
            {
                right = false;
            }
            else if (e.KeyCode == Keys.Space)
            {
                brake = false;
            }
        }

        private void Speed_bar_KeyDown(object? sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.W)
            {
                fwd = true;
                //Debug.WriteLine(Keys.W);
            }
            else if (e.KeyCode == Keys.S)
            {
                rev = true;
                //Debug.WriteLine(Keys.S);
            }
            if (e.KeyCode == Keys.A)
            {
                left = true;
                //Debug.WriteLine(Keys.A);
            }
            else if (e.KeyCode == Keys.D)
            {
                right = true;
                //Debug.WriteLine(Keys.D);
            }
            else if (e.KeyCode == Keys.Space)
            {
                brake = true;
                //Debug.WriteLine(Keys.Space);
            }
        }
    }
}
